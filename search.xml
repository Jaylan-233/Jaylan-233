<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络分层的必要性</title>
      <link href="/2023/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/"/>
      <url>/2023/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络分层的必要性"><a href="#计算机网络分层的必要性" class="headerlink" title="计算机网络分层的必要性"></a>计算机网络分层的必要性</h1><h1 id="为什么分层"><a href="#为什么分层" class="headerlink" title="为什么分层"></a>为什么分层</h1><p>​在网络的实际应用中，需要解决各种不同的问题，因此需要使用不同的层来分别解决这些问题，并确保每个层都能够各司其职，便于管理。此外，还需要将各种问题进行拆分，分配到不同的层中去处理。</p><p><img src="https://res.craft.do/user/full/1cf7cef4-ee3a-97e3-deb8-de111119df84/doc/0add4ff3-c98c-4b40-9073-d162fa63fb5b/319915ce-ba5e-40cc-afe5-6495c2900aff" alt="image.png"></p><span id="more"></span><h1 id="物理层解决所解决的问题"><a href="#物理层解决所解决的问题" class="headerlink" title="物理层解决所解决的问题"></a>物理层解决所解决的问题</h1><p><strong>解决分组在两主机之间传输的问题</strong></p><ul><li>用什么物理接口？</li><li>用什么信号来表示bit?</li></ul><p><img src="https://res.craft.do/user/full/1cf7cef4-ee3a-97e3-deb8-de111119df84/doc/0add4ff3-c98c-4b40-9073-d162fa63fb5b/586d342a-aae9-48dd-aba9-21b4fe574fd1" alt="image.png"></p><h1 id="数据链路层所解决的问题"><a href="#数据链路层所解决的问题" class="headerlink" title="数据链路层所解决的问题"></a>数据链路层所解决的问题</h1><p><strong>解决分组在网络中传输的问题</strong></p><ul><li>如何标识各个主机?</li><li>怎么从数据流中区分地址和数据</li><li>争用总线问题如何解决?</li></ul><p><img src="https://res.craft.do/user/full/1cf7cef4-ee3a-97e3-deb8-de111119df84/doc/0add4ff3-c98c-4b40-9073-d162fa63fb5b/5ceff2b7-a7ce-42fb-8c3c-fe6257c6394f" alt="image.png"></p><h1 id="网络层所解决的问题"><a href="#网络层所解决的问题" class="headerlink" title="网络层所解决的问题"></a>网络层所解决的问题</h1><p><strong>解决分组在网络之间传输的问题</strong></p><ul><li>怎么标识各个网络</li><li>怎么标识网络中的主机</li><li>路由器怎么转发分组</li><li>如何进行路由选择(选什么路径进行转发分组?)</li></ul><p><img src="https://res.craft.do/user/full/1cf7cef4-ee3a-97e3-deb8-de111119df84/doc/0add4ff3-c98c-4b40-9073-d162fa63fb5b/d53fe8b0-86e5-4617-98d7-f0f96f42d648" alt="image.png"></p><h1 id="运输层所解决的问题"><a href="#运输层所解决的问题" class="headerlink" title="运输层所解决的问题"></a>运输层所解决的问题</h1><ul><li>得到的分组发给哪个应用(运输给谁)</li></ul><blockquote><p>主机收到了发来的分组QQ和浏览器都和网络通信相关的应用进程</p></blockquote><blockquote><p>这个分组是给谁的?</p></blockquote><ul><li>传递分组（运输过程中)出错了怎么办</li></ul><p><img src="https://res.craft.do/user/full/1cf7cef4-ee3a-97e3-deb8-de111119df84/doc/0add4ff3-c98c-4b40-9073-d162fa63fb5b/104bc4b4-da5a-4f62-8211-324c50bcca55" alt="image.png"></p><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p>制定了各种协议(面向应用的)为不同应用程序指定了各种协议来进行开发</p><blockquote><p>要编写邮件相关的应用就按照SMTP协议</p></blockquote><blockquote><p>要搞文件传输就按照FTP协议</p></blockquote><p><img src="https://res.craft.do/user/full/1cf7cef4-ee3a-97e3-deb8-de111119df84/doc/0add4ff3-c98c-4b40-9073-d162fa63fb5b/68b6f2bb-47a3-41f0-a3b1-08ac164238c0" alt="image.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>网络在在使用过程中会产生众多问题 将各种问题进行拆分 交给不同的层进行解决</p><p>不同层各司其职、解决各自需要解决的问题</p><hr><p>Q:这么多问题之间用一个层或者干脆不分层全给他解决了不好吗</p><p>A:全放一块解决 会导致体系结构变得十分复杂、难以理解、难以维护</p><p>和写程序一样过多的功能(网络中问题的解决)写在一块会导致耦合性过高后期难以维护</p><hr><ul><li><strong>物理层</strong><ol><li>用什么样的信号标识bit</li><li>用什么样子的网络接口</li></ol></li><li><strong>数据链路层</strong><ol><li>怎么在<strong>一个网络</strong>中传输报文</li><li>怎么标识网络中的主机</li></ol></li><li><strong>网络层</strong><ol><li>怎么在<strong>各个网络</strong>之间传输报文</li><li>怎么标识各个网络和其中的主机</li></ol></li><li><strong>运输层</strong><ol><li>收到的报文应该给哪个进程(有网络通信相关进程应用)</li><li>报文运输过程中出现错误怎么办</li></ol></li><li><strong>应用层</strong><ol><li>制定了各种协议 为不同的应用</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程</title>
      <link href="/2023/07/03/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/"/>
      <url>/2023/07/03/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="软件过程-过程模型"><a href="#软件过程-过程模型" class="headerlink" title="软件过程(过程模型)"></a>软件过程(过程模型)</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>为了获取高质量软件所需要完成的一系列任务的框架,规定了完成各项任务的工作步骤</p><blockquote><p>为了能开发出高质量的软件 得按一定的开发流程来,所遵守的一整套流程被称之为软件过程(过程模型)</p></blockquote><ul><li><strong>ISO9000对软件过程的定义</strong></li></ul><p>使用资源将输入转换为输出的活动所构成的系统</p><blockquote><p>给定<strong>输入</strong>比如人员 需求,经过<strong>一系列过程</strong>得到输出即<strong>软件</strong></p><p>这里的一系列过程可以理解为软件过程</p></blockquote><span id="more"></span><h2 id="2-过程模型"><a href="#2-过程模型" class="headerlink" title="2.过程模型"></a>2.过程模型</h2><p>软件过程以软件生命周期为基础,</p><p><strong>但没有一个通用的软件过程</strong>能<strong>适用</strong>于<strong>所有类型的软件的开发</strong></p><p>因此开发不同的软件应根据软件的特点采用不同的软件过程(过程模型)</p><h2 id="3-常见的过程模型"><a href="#3-常见的过程模型" class="headerlink" title="3.常见的过程模型"></a>3.常见的过程模型</h2><p>1.瀑布模型</p><p>2.快速原型模型</p><p>3.增量模型</p><p>4.螺旋模型</p><p>5.喷泉模型</p><p>6.Rational统一过程</p><p>7.敏捷过程与极限编程</p><p>8.微软过程</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>软件过程是将输入(人员、需求)变为输出(满足需求的高质量软件)的过程</li><li>开发不同类型软件需要根据需要使用过程(过程模型) </li><li>软件过程也可以称之为过程模型</li><li>软件生命周期是最基本的过程模型</li><li>在生命周期的基础上进行优化扩充就可以得到不同的过程模型</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String StringBuffer StringBuilder</title>
      <link href="/2023/06/29/String-StringBuffer-StringBuilder/"/>
      <url>/2023/06/29/String-StringBuffer-StringBuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="String-StringBuffer-StringBuilder"><a href="#String-StringBuffer-StringBuilder" class="headerlink" title="String StringBuffer StringBuilder"></a>String StringBuffer StringBuilder</h1><h2 id="为什么要区分这么多的字符串类"><a href="#为什么要区分这么多的字符串类" class="headerlink" title="为什么要区分这么多的字符串类"></a>为什么要区分这么多的字符串类</h2><blockquote><p>字符串是使用最为频繁的数据类型之一</p><p>有的字符串需要经常修改 、有的的不需要</p><p>有时需要处理大量字符、有时只要处理少量的字符串</p></blockquote><p><strong>根据操作的不同特点 使用不同的的字符串类型</strong></p><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><ul><li>都是字符串类</li><li>都是用来处理字符串的</li></ul><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="执行速度"><a href="#执行速度" class="headerlink" title="执行速度"></a>执行速度</h3><p>StringBuilder &gt;StringBuffer&gt;String</p><span id="more"></span><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>String -线程安全</p><p>StringBuffer -线程安全</p><p>StringBuilder-线程不安全</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><ul><li><p>大量</p><ul><li>单线程-StringBuilder</li><li>多线程-StringBuffer</li></ul></li><li><p>少量</p><ul><li>String</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和抽象类</title>
      <link href="/2023/06/29/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
      <url>/2023/06/29/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h1><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><ul><li>都能实现多态</li><li>都能增加代码的重用性</li></ul><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="作用方面"><a href="#作用方面" class="headerlink" title="作用方面"></a>作用方面</h3><ul><li><p>接口(只定义方法 不进行实现)</p><ul><li><p>定义了公共方法和常量 没有具体的实现</p><blockquote><p>实现接口的类叫做实现类 必须实现全部方法</p></blockquote></li></ul></li><li><p>抽象类(本质还是一个类 其中写了抽象方法)</p><ul><li><p>可以包含抽象方法和非抽象方法</p><blockquote><p>对应的实现方法可以选择 部分实现或者全部实现</p></blockquote></li></ul></li></ul><span id="more"></span><h3 id="多继承和支持"><a href="#多继承和支持" class="headerlink" title="多继承和支持"></a>多继承和支持</h3><ul><li><p>接口</p><ul><li><p>支持多继承</p><blockquote><p>一个类可以实现多个接口</p></blockquote></li></ul></li><li><p>抽象类</p><ul><li><p>一个类只能实现一个抽象类</p><blockquote><p>因为本质是类 且 类具有单继承的机制</p></blockquote></li></ul></li></ul><!-- more --><h3 id="类型方面"><a href="#类型方面" class="headerlink" title="类型方面"></a>类型方面</h3><ul><li>接口 –&gt; 引用型数据类型</li><li>抽线类–&gt; 类</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
